generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  hash      String
  firstName String?
  lastName  String?
  role      Role
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payments          Payment[]
  subscriptions     Subscription[]
  shippingDetails   ShippingDetails?
  subscriptionBoxes SubscriptionBox[]

  @@map("user")
}

model Package {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  period      Int
  price       Float
  description String?
  image       String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]

  @@map("package")
}

model Seller {
  id         Int     @id @default(autoincrement())
  name       String
  email      String  @unique
  line1      String
  line2      String
  city       String
  postalCode String
  state      String
  country    String
  isActive   Boolean @default(true)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  items Item[]

  @@map("seller")
}

model Item {
  id       Int      @id @default(autoincrement())
  itemName String
  price    Float
  category Category
  quantity Int
  isActive Boolean  @default(true)
  brand    String
  outdoor  String
  gender   String
  age      Int
  size     String
  material String
  tags     String
  color    String
  rating   Int

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerId Int
  seller   Seller   @relation(fields: [sellerId], references: [id])
  Review   Review[]

  subscriptionBox          SubscriptionBox[]
  ItemsOnSubscriptionBoxes ItemsOnSubscriptionBoxes[]

  @@map("item")
}

model Payment {
  id     Int           @id @default(autoincrement())
  amount Float
  status PaymentStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  subscription Subscription?

  @@map("payment")
}

model Subscription {
  id        Int                @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  status    SubscriptionStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  paymentId Int     @unique
  payment   Payment @relation(fields: [paymentId], references: [id])
  packageId Int
  package   Package @relation(fields: [packageId], references: [id])

  @@map("subscription")
}

model ShippingDetails {
  id         Int     @id @default(autoincrement())
  lane1      String?
  lane2      String?
  city       String
  state      String?
  country    String
  postalCode String

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("shipping_details")
}

model SubscriptionBox {
  id    Int   @id @default(autoincrement())
  total Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items Item[]

  userId                   Int
  user                     User                       @relation(fields: [userId], references: [id])
  ItemsOnSubscriptionBoxes ItemsOnSubscriptionBoxes[]
  feedback                 Feedback?

  @@map("subscription_box")
}

model ItemsOnSubscriptionBoxes {
  itemId Int
  item   Item @relation(fields: [itemId], references: [id])

  subscriptionBoxId Int
  subscription_box  SubscriptionBox @relation(fields: [subscriptionBoxId], references: [id])

  @@id([itemId, subscriptionBoxId])
  @@map("item_subscription_box")
}

enum Role {
  USER
  MANAGER
  SUPER_ADMIN
}

enum Category {
  SNEAKERS
  SOCKS
}

enum PaymentStatus {
  SUCCESS
  FAIL
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

model Feedback {
  id                      Int     @id @default(autoincrement())
  result                  String
  isSubscriptionCancelled Boolean @default(false)
  isPositive              Boolean

  Review Review[]

  subscriptionBoxId Int @unique
  subscriptionBox   SubscriptionBox @relation(fields: [subscriptionBoxId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedback")
}

model Review {
  id                Int     @id @default(autoincrement())
  rating            Int
  description       String
  outcome           String
  isReviewDiscarded Boolean @default(false)

  feedBackId Int
  feedback   Feedback @relation(fields: [feedBackId], references: [id])

  itemId Int
  item   Item @relation(fields: [itemId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("review")
}
