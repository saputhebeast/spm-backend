generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  hash      String
  firstName String?
  lastName  String?
  role      Role
  isActive  Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  payments      Payment[]
  subscriptions Subscription[]

  @@map("user")
}

model Package {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  period      Int
  price       Float
  description String?
  image       String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subscriptions Subscription[]

  @@map("package")
}

model Seller {
  id         Int     @id @default(autoincrement())
  name       String
  email      String  @unique
  line1      String
  line2      String
  city       String
  postalCode String
  state      String
  country    String
  isActive   Boolean @default(true)

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  items Item[]

  @@map("seller")
}

model Item {
  id       Int      @id @default(autoincrement())
  itemName String
  price    Float
  category Category
  quantity Int
  isActive Boolean  @default(true)
  brand    String
  outdoor  String
  gender   String
  age      Int
  size     String
  material String
  tags     String
  color    String
  rating   Int

  createAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  sellerId Int
  seller   Seller @relation(fields: [sellerId], references: [id])

  @@map("item")
}

model Payment {
  id     Int           @id @default(autoincrement())
  amount Float
  status PaymentStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id])

  subscription Subscription?

  @@map("payment")
}

model Subscription {
  id        Int                @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
  status    SubscriptionStatus

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  paymentId Int     @unique
  payment   Payment @relation(fields: [paymentId], references: [id])
  packageId Int
  package   Package @relation(fields: [packageId], references: [id])

  @@map("subscription")
}

enum Role {
  USER
  MANAGER
  SUPER_ADMIN
}

enum Category {
  SNEAKERS
  SOCKS
}

enum PaymentStatus {
  SUCCESS
  FAIL
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}
